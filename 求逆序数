class Solution {
public:
	int InversePairs(vector<int> data) {
		if(data.size() <= 0)
			return 0;
		return mergeSort(data, 0, data.size()-1) %1000000007;

	}
	int mergeSort(vector<int> &data, int begin, int end)
	{

		int mid = (begin + end)>>1;
		int count = 0;
		if(begin < end)
		{
			int left = mergeSort(data, begin, mid);
			int right = mergeSort(data, mid+1, end);
			count = (left + right + merge(data, begin, end)) %1000000007;
		}
		return count;
	}
	int merge(vector<int> &data, int low, int high)
	{
		vector<int> temp(high-low+1, 0);//临时数组存放已排序的区间
		int mid = (low + high)>>1;
		int i,j,m;
		int count = 0;
		for(i = mid, j = high, m = temp.size()-1; i >= low && j >= mid+1; m--)
		{
			if(data[i] > data[j])
			{
				temp[m] = data[i--];
				count =(count+ j-mid);//如果左侧i下标的数大于右区间的j下标的数，因为左右区间都有序，因此左侧i是大于右区间j左侧的所有数
			}
			else
			{
				temp[m] = data[j--];
			}
            if(count >= 1000000007)
                count %= 1000000007;

		}
		while(i >= low) temp[m--] = data[i--];//注意是从区间的右侧往左侧
		while(j >= (mid+1)) temp[m--] = data[j--];
		copy(temp.begin(), temp.end(), data.begin()+low);
		return count;
	}
};
